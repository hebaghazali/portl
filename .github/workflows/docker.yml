name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_REPO: ghcr.io/hebaghazali/portl
  IMAGE_NAME: portl

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_REPO }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Extract package version
      id: version
      run: |
        # Get version from Python package
        PACKAGE_VERSION=$(python -c "import sys; sys.path.append('./src'); from portl import __version__; print(__version__)")
        echo "PACKAGE_VERSION: $PACKAGE_VERSION"
        
        # If this is a tag push, verify tag matches package version
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          GIT_TAG=${GITHUB_REF#refs/tags/}
          # Remove 'v' prefix if present for comparison
          CLEAN_TAG=${GIT_TAG#v}
          
          if [[ "$CLEAN_TAG" != "$PACKAGE_VERSION" ]]; then
            echo "::warning::Git tag ($GIT_TAG) does not match package version ($PACKAGE_VERSION)"
          fi
          
          # Use the tag as version (with v prefix)
          VERSION=$GIT_TAG
        else
          # Use package version with commit SHA for non-tag builds
          SHORT_SHA=${GITHUB_SHA::7}
          VERSION="v$PACKAGE_VERSION-$SHORT_SHA"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY_REPO }}:latest
          ${{ env.REGISTRY_REPO }}:${{ steps.version.outputs.version }}
        labels: |
          org.opencontainers.image.title=Portl CLI
          org.opencontainers.image.description=A developer-first CLI tool for moving data across databases, CSVs, and Google Sheets
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).created }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=MIT
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test the built image
      run: |
        echo "Testing amd64 image..."
        docker run --rm ${{ env.REGISTRY_REPO }}:${{ steps.version.outputs.version }} --version
        
        echo "Testing arm64 image..."
        # Use --platform to explicitly specify the architecture
        docker run --rm --platform linux/arm64 ${{ env.REGISTRY_REPO }}:${{ steps.version.outputs.version }} --version || {
          echo "Error running arm64 image. This could be due to missing QEMU emulation."
          exit 1
        }

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY_REPO }}:${{ steps.version.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

    - name: Summary
      run: |
        echo "## 🐳 Docker Image Built Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY_REPO }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Package Version:** \`${{ steps.version.outputs.package_version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY_REPO }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY_REPO }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Run directly" >> $GITHUB_STEP_SUMMARY
        echo "docker run --rm ${{ env.REGISTRY_REPO }}:${{ steps.version.outputs.version }} --help" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Install wrapper" >> $GITHUB_STEP_SUMMARY
        echo "curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install-portl.sh | bash" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
